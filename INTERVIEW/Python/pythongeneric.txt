"""
Python General Questions
"""

1) what are the data types you have used in python:

    Numeric Types: int, float, complex 
    Sequence Types: list, tuple, range 
    Text Type: str 
    Set Types: set, frozenset 
    Mapping Type: dict 
    Boolean Type: bool 
    Binary Types: bytes, bytearry, memoryview 
    NoneType: None 

    Example: 
    --------

    a = 10 
    b = 3.14 
    c = 'hello'
    d = [1,23,4]
    e = (1,2,4)
    f = {'a': 1, 'b': 2', 'c': 3}
    g = True 


2) What is the doc string:

    a) A docstring is a special string that is used to document a 
       Moduele, Function, class or Method in python.
    
    b) it is enclosed within triple qotes ''' or """.

    c) Can be accessed using the .__doc__ attribute. 


    Example: 
    --------
    def add(a, b):
        """ This function return the sum of the two numbers."""
        return a + b 

    print(add.__doc__)


3) How do you import package:

    a) We can import package or module using the import or from keyword 

    example:
    --------
    import os 
    
    from datetime import datetime 
    print(datetime.now())

4) Any idea about decorators:

    a) Decorator is a funtion that takes another function as input 
       and extends its behavior without modifying.
    
    Example:
    --------
    def decorator_fun(func):
        def wrapper():
            print("Before funtion call")
            func()
            print("Post function call")
        return wrapper 
    
    @decorator_fun
    def say_hello():
        print("Hello")
    
    @decorator_fun
    def say_goodmorning():
        print("Hello Good morning")

5) How doo you install a package in python:

    a) we can install by using pip (python package installer)
        pip install requests 
        pip install pytest 
        pip install pyyaml 
        pip install numpy==1.24.2

6) Any idea about virtual environment:

    a) Virtual environment is an isolated python environment that allows 
       you to install package separetly from the global environment 
    
    1. python -m ven myenv 
    2. source myenv/bin/activate
    3. myenv\Scripts\activate 

    4. deactivate #if want to deactivate venv 

7) Any idea about JSON and YAML:

    a) JSON (javaScript Object Notation) is lightweight data-interchange format. 
    import json 
    data = {"name": "a", "age": 24}
    parsed = json.loads(data)
    print(parsed['name])

    b) YAML (YAMAL Ain't Markup Launguage)
    import yaml 
    with open('file_path', 'r') as file:
        data = yaml.safe_load(file)
    print(data['name])


"""
String Operations
"""

1) Check if a string is a palindrom:
    a) A palindrom is a string that reads the same backward as forward.

    def is_str_palindrome(s):
        return s == s[::-1]

    s = input("Enter a string ...")
    if is_str_palindrome(s):
        print(f"'{s}' is a palindrome.")
    else:
        print(f"'{s}' is not palindrome.)

2) Check if two strings are anagrams:
    a) Two strings are nagrams if they have the same 
       charecters with the same frequency regardless of order.
    
    def are_anagrams(s1, s2):
        return sorted(s1.lower() == sorted(s2.lower()))
    
    s1 = input("Enter first string: )
    s2 = input("Enter second string: )

    if are_anagrams(s1, s2):
        print("It is an anagram.")
    else:
        print("It is not a anagram.")

3) Check if s2 is subset(substring) of s1 and return index:
    a) Check if one string is substring of another, and find the starting index. 

    def is_subset(s1, s2):
        index = s1.find(s2)
        if index !=-1: 
            print(f"s2 is a subset in s1 and index position is {index}")
        else:
            print(f"s2 is not a subset s1")

    s1 = input("Enter string s1: ")
    s2 = input("Enter string s2: ")
    is_subset(s1, s2)

4) Slicing and Indexing example:

    example:
    --------
    s = "PythonProgramming" 
    print("First 6 charecters: ", s[:6])
    print("Last 5 charecters: ", s[-5:])
    print("Reversed string: ", s[::-1])
    print("Index 2 to 9: ", s[2:10])


"""
List Operations
"""
1) how to sort a list:
    a) Use the sort() method or sorted() function (returns a new list).
      nums = [4,2,8,9,10]
      nums.sort()
      print(nums)

      nums = [5,8,9,3,1]
      sorted_nums = sorted(nums)
      print(sorted_nums)

2) Using odd numbers from an input list:
    a) input_list = list(range(10))
       odd_nums = [x for x in input_list if x% 2 !=0]
       print(odd_nums)

3) how to find the index of an item in list:
    a) friuts = ['apple', 'banana', 'cherry']
       position = friuts.index("banana")

4) Common list methods:

    append(x) --> Add element x to the end of list 
    extend(12) --> Extends list by appending all items from 12 
    insert(i, x) --> inserts x at index 1 
    remove(x) --> remove first occurrence of x 
    pop(i) --> Removes and returns items at index i 
    index(x) --> Returns first index of x 
    count(x) --> Returns count of x in list 
    sort() --> Sorts list in-place 
    reverse() --> Reverses list-in-place 
    clear() --> Removes all items from list 
    copy() --> Returns a shallow copy of the list 

5) slicing and indexing examples with list: 
    
    nums = [10,20,30,40,50]
    print(nums[0])
    print(nums[-1])
    print(nums[2:5])
    print(nums[:3])
    print(nums[::2])

6) difference between set/tuple and list:

    1. List --> Mutable/Ordered/Duplicates/(Use cases/General collection)
    2. Tuple --> Immutable/Ordered/Duplicates(Use cases/Fixed collection)
    3. Set --> Mutable/Duplicates/No Unordered/ (Use cases Uniqe-elements) 

7) what is range():

    range() generates a sequence of numbers (immutable)
    commonly used in loops
    range(start, stop, step)

    list(range(5))
    list(range(2,10,2))


"""
Dictionary Operations
"""

1) how to define dictionary:

    a) dictionary is defined using curly braces {}, and stores key-value pairs.
    my_dict = {
        'name': 'alice',
        'age': 25,
        'city': 'new york'
    }
    or dict() constructor 
    my_dict = dict(name='aliance', age=25, 'city'='newyork')

2) how to access a dictionary:

    print(my_dict['name'])
    *using get() method(avoids error if key not found):
    print(my_dict.get('age'))
    print(my_dict.get('gender'))

3) how to update dictionary:

    my_dict['age'] = 30
    my_dict['gender'] = 'female'
    * using update() method 
    my_dict.update({'city': 'bgl'})

4) Dictionary Methods:

    dict.keys()     ---> Returns all keys 
    dict.values()   ---> Returns all values 
    dict.items()    ---> Returns key-value pairs as tuple 
    dict.get(key)   ---> Returns value of key(None if not found)
    dict.update()   ---> updates dict with another dict 
    del dict[key]   ---> deletes a key-value pair 
    dict.pop(key)   ---> removes key and return vlaue 
    dict.clear()    ---> clear all items 

5) create dictionary from two lists:

    list1 = ['fruit', 'color', 'flower']
    list2 = ['kiwi', 'green', 'orchid']
    result = dict(zip(list1, list2))
    print(result)

"""
Looping
"""
1) Get current time and check if current time is 12, exit the loop else wait 5 mins and try again:
    import time 
    from datetime import datetime 

    while True:
        current_time = datetime.now()
        hors = current_time.hour

        print("Current hour: ", hour)

        if hours == 12:
            print("it is 12 clock! exiting loop.")
        else:
            print("not 12 yet. waiting 5 minutes")
            time.sleep(300)

2) List [10,20,30,40,50] use while loop and exit after reaching:
    
    list_1 = [10,20,30,40,50]
    i=0 
    while i < len(list1):
        if list1[i] == 30:
            print("Reached :", list1[i])
            break 
        print(list1[i])
        i +=1 

3) List [10,15,20,25,30] use for loop to form odd_list and even_list:
    
    list1 = [10,15,20,25,30]
    odd_1 = []
    even_1 = []
    for num in list1:
        if num %2 ==0:
            even_1.append(num)
        else:
            odd_1.append(num)
    print("Odd numbers:", odd_l)
    print("Even numbers:", even_l)  

4) List comprehension - short and clean way to crate list:
   
    nums = [1, 2, 3, 4, 5]
    squares = [x**2 for x in nums]
    print(squares)

5) Lambda Function - Anonymous (inline) functions:

    add = lambda x, y: x + y
    print(add(3, 5))  # Output: 8

6) map() - Apply a function to each item in list:
   
    nums = [1, 2, 3, 4]
    doubles = list(map(lambda x: x*2, nums))
    print(doubles)  # Output: [2, 4, 6, 8]

"""
Class and methods 
"""
data = [
    {"sshUserName": "admin", "groupName": "vpc", "switchName": "SW_95", "switchDbID": "1020", "ipAddress": "10.1.228.95"},
    {"sshUserName": "admin", "groupName": "vpc", "switchName": "SW_146", "switchDbID": "1070", "ipAddress": "10.1.228.146"},
    {"sshUserName": "admin", "groupName": "Policy", "switchName": "SW_192", "switchDbID": "5480", "ipAddress": "10.1.228.192"}
]

class SwitchOperation:

    def __init__(self, data):
        self.data = data 
    
    def get_ip_list(self):
        return [entry['ipAddress] for entry in self.data]
    
    def get_switch_name(self):
        return [entry['switchName] for entry in self.data]
    
    def get_switch_ip_dict(self):
        return [entry['switchName']: entry['ipAddress] for entry in self.data]
    
    def get_url_list(self):
        base_url = "https://localhost/app/cisco/api/getdetails?switchid="
        return [base_url + entry['switchDbID] for entry in self.data]
    
sm = SwitchManager(data)

print("IP List:", sm.get_ip_list())
print("Switch Names:", sm.get_switch_names())
print("Switch-IP Dictionary:", sm.get_switch_ip_dict())
print("URL List:", sm.get_url_list())


* what is __init__ and self:

    __init__() is a constructor method in python classes,it called automatically when 
    the object is created.
    self. refers to the current instance of the class. it allows to instance variables and Methods

    class Sample:
        def __init__(self, name):
            self.name = name 

* variable scope inside class:

    Instance variables (self.var): are tied to the object. Available across methods.
    Local variables exist only inside a method 
    Class variables are shared across all instance of class. 

    class Demo:
        class_var = 100 #Class variable

        def __init__(self, x):
            self.instance_var = x 
        
        def print_vars(self):
            local_var = 10 #Local variable
            print("Instance:", self.instance_var)
            print("Class:", Demo.class_var)
            print("Local:", local_var)

"""
Variable Scoping 
"""
    * Local Variables: 
        Local variable defined inside a function, accessible only within that function.
        def my_func():
            x=10
            print(x)
    
    * Global variables:
        Global variable dfined outside all functions, accessible throught the program.
        x=100 
        def my_func()
            print(x) #accessing global variable inside function 
        my_func()
    
    * how to modify global variable inside a function:
        global x 
        x = 10 

"""
Exception Handling
"""
* what is exception and how to handle it:
    An exception is an error that occurs during runtime. it interrupts normal program flow.
    Handled using try....except blocks:
        try:
            results = 10/0
        except ZeroDivisionError:
            print("Cannot divide by zero!")

* what exceptions have you encourtered more:

    ZeroDivisionError
    TypeError 
    IndexError 
    KeyError 
    ValueError 
    FileNotFoundError 

* how to raise an exception manually:
    age = -5 
    if age < 0:
        raise ValueError("Age cannot be negative")

* how to create your own custom exception:

    class MyCustomErro(Exception):
        pass 
    
    def check(n):
        if n < 0:
        raise MyCustomErro("Negative value not allowed")
    check(-1)

"""
File Operations
"""

* how to read a file:
    with open('file_path', 'r') as file:
        content = file.read()
        print(content)

* how to write a file:
    with open('file_path', 'w') as file:
        file.write("write file content")
        file.write("Write file content....")


"""
Find most frequently occurring process 
"""
log_data = """
2025-02-10 12:01:22 process_1 started
2025-02-10 12:02:10 process_2 started
2025-02-10 12:03:15 process_1 finished
2025-02-10 12:04:22 process_1 started
2025-02-10 12:05:15 process_3 started
"""

from collections import Counter 
import re 

processes = re.findall(r'(process_\d+', log_data))
counter = Counter(processes)

most_common = counter.most_common(1)[0]
print(f"Most frequent process: {most_common[0]} (Occurred {most_common[1]} times)")


"""
Regular Expression
"""
op = '''
Software

BIOS: version 07.69

NXOS: version 9.3(11)

BIOS compile time: 04/08/2021

NXOS image file is: bootflash:///nxos.9.3.11.bin
'''

* Extract BIOS and NXOS version using regex:
    
    import re
    bios = re.search(r'BIOS:\s*version\s*([\d.]+)', op)
    nxos = re.search(r'NXOS:\s*version\s*([\d.()]+)', op)

    print("BIOS =", bios.group(1))
    print("NXOS =", nxos.group(1))

    BIOS = 07.69
    NXOS = 9.3(11)


"""
IPv4 Address Validation
"""
Rules:
    must contains 4 octets
    each octet: 0-255 
    no charecter/symbols allowed 

    import re
    def is_valid_ipv4(ip):
        pattern = r'^((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$'
        return re.match(pattern, ip) is not None
    # Test cases
    ips = ['10.0.0.1', '10.0.0.266', '10.a.0.1', '10.*.0.10']
    for ip in ips:
        print(f"{ip}: {'Valid' if is_valid_ipv4(ip) else 'Invalid'}")

    #output:
    ========
    10.0.0.1: Valid
    10.0.0.266: Invalid
    10.a.0.1: Invalid
    10.*.0.10: Invalid

"""
He given two dictionaries in that dictionaries we have some different 
keys and same keys here the task is to what are the different keys are 
there in both dictionaries kept into one empty dictionary.
"""
d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': d}

results = {}
for key in d1.keys() ^ d2.keys():
    result[key] = d1.get(key, d2.get(key))
print(result)

* swap two numbers without thrid vairable:

    a, b = 5, 10 
    a = a + b 
    b = a - b 
    a = a - b 


