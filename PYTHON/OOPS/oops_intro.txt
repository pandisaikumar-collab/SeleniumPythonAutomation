"""
OOPS
Day-59
"""
Features of OOPS:
=================
1) Encapsulation 
2) Abstration 
3) Inheritance 
4) Polymorphism 

The above OOPS provides 
Security/Flexibility/Re-usability 

In java, the developer is forced to write programms using oops 
princeples only, we cannot develop applications with oops in java.

But in python, we can write programs using 
1) procedural-oriented programming 
2) object-oriented programming 

Encapsulation: combine data and methods
==============
Q) why we need to combine data and methods?

    1) Every application has got data and operations 
    2) data represented using vairables 
    3) operations represented using functions/methods 

    //customer --> data //all are global variables 
    cname = "Miller"
    caccno = 5012357565
    caddr = "BGL"
    bal = 39999

    //customer operations (functions)

def deposit(damt):
    pass 

def withdraw(wamt):
    pass 

def tax():
    pass 

def hra():
    pass 

1) in the above example, all the global variables of customer and emp 
   can be accessed by all the functions of customer and emp.

2) actually --> customer data should be accessed by only customer functions
   and emp data should be accessed by emp functions only 

3) but here customer data is accessed by both customer and emp functions 
   and similarly emp data is accessed by both customer and emp functions.
   so here there is no Security.

4) so we need to make customer data available only to customer functions
   similarly we need to make emp data available only to emp functions.

5) so we need to group customer data and customer functions as one group called customer class 
   we need to group emp data and emp functions as one group called as emp class, so that 
   only emp functions can access emp data and customer functions can access customer data. 


Encapsulation: 
==============
The process of grouping/binding related data (vairables)
   along with methods (functionalities) is called as encapsulation 

Encapsulation is implemented by using a class: 
==============================================
Class: A class is structure which groups/binds the related data along with it's methods

1) class is collection of vairables and methods 
2) data is represented using vairables and 
3) operations are represented using methods 

In class, we can have 2 types of variables, 

syntax of class: 
================
class name: 
    """ doc string """  -> says about the functionality of a class 
    ----------
    ----------  --------> data(variables) + Methods 
    ----------

Note: All the statements within the clas should follow the indentation. 

class consists of the following: 
    1. docstring 
    2. vaiables 
    3. static variables 
    4. non-static variables 
    5. methods 

cname ---------
caddr, 
caccno, -------> customer group, 
chal             consisting of data (variable)
                 such as cname, caddr, caccno, and 
                 methods such as deposit(), transfer() and withdraw()


ename -------> 
eid 
esal 
TA()
PF()
DA()
HRA()

In the above example, we have got 2 groups,

customer group and emp group, we can represent by 2 classes 

class Customer:
    ........
    .........
    .........  --------> consists of custumer variables + customer methods (functions)
    .........

class Emp: 
    ........
    ........
    ........ ---------> consits of emp vaiables + emp methods 


in class customer, customer variables can be accessed by only customer methods 
similarly, in emp class, emp variable can be access by only emp methods 

object: 
=======
An object is an instance of a class 
A class is a collection of similarly objects.
we can create 'n' no of objects for a class 
each object will have its own copy of variables and methods 

ex: 
===
class emp: 
    eid=input("Enter emid: )
    ename=input("Enter emname)
    sal=input("Enter emp sal: )
    desig=input("Enter emp designation:)
    def tax: 
    def hra():

obj--e1=emp()
obj--e2=emp()

